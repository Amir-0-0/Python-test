from aiogram import Bot, Dispatcher, executor, types
from config import token
from questions import *
start_text = '''<em>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —Ç–µ—Å—Ç–µ
–Ω–∞ –∑–Ω–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è <b>Python</b>üòÅ

–¢—ã —Å–º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏—Ö</em>üéì'''

balls = 0

bot = Bot(token)
dp = Dispatcher(bot)

start_markup = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' , callback_data='—Å—Ç–∞—Ä—Ç')
start_markup.add(button1)

q1_markup = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton('–î–∞' , callback_data='1-–î–∞')
button2 = types.InlineKeyboardButton('–ù–µ—Ç' , callback_data='1-–ù–µ—Ç')
button3 = types.InlineKeyboardButton('–û—à–∏–±–∫—É' , callback_data='1-Err')
q1_markup.add(button1,button2,button3)

q2_markup = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton('5' , callback_data='2-5')
button2 = types.InlineKeyboardButton('10' , callback_data='2-10')
button3 = types.InlineKeyboardButton('–û—à–∏–±–∫—É' , callback_data='2-Err')
q2_markup.add(button1,button2,button3)

q3_markup = types.InlineKeyboardMarkup()
button0 = types.InlineKeyboardButton('True' , callback_data='3-f')
button1 = types.InlineKeyboardButton('34' , callback_data='3-f')
button2 = types.InlineKeyboardButton('45' , callback_data='3-t')
button3 = types.InlineKeyboardButton('–≤–µ—Å—å —Å–ø–∏—Å–æ–∫' , callback_data='3-f')
q3_markup.add(button0,button1)
q3_markup.add(button2,button3)

q4_markup = types.InlineKeyboardMarkup()
button0 = types.InlineKeyboardButton('–æ—à–∏–±–∫–∞' , callback_data='4-f')
button1 = types.InlineKeyboardButton('2' , callback_data='4-t')
button2 = types.InlineKeyboardButton('True' , callback_data='4-f')
button3 = types.InlineKeyboardButton('False' , callback_data='4-f')
q4_markup.add(button0,button1)
q4_markup.add(button2,button3)

q5_markup = types.InlineKeyboardMarkup()
button0 = types.InlineKeyboardButton('–Ω–∞—á–Ω–µ—Ç—Å—è –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª', callback_data='5-t')
button1 = types.InlineKeyboardButton('4', callback_data='5-f')
button2 = types.InlineKeyboardButton('5', callback_data='5-f')
button3 = types.InlineKeyboardButton('3', callback_data='5-f')
q5_markup.add(button0)
q5_markup.add(button1,button2,button3)

finish_markup = types.InlineKeyboardMarkup()
button0 = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='–≥–≥')
finish_markup.add(button0)


@dp.message_handler(commands=['start'])
async def hello(message: types.Message):
    await bot.send_message(message.chat.id, start_text ,parse_mode='HTML', reply_markup=start_markup)




@dp.callback_query_handler()
async def callback(callback:types.CallbackQuery):
    global balls
    if callback.data == '—Å—Ç–∞—Ä—Ç':
        await callback.answer('START')
        await callback.bot.send_message(callback.message.chat.id , question1 , reply_markup=q1_markup, parse_mode='HTML')
    elif callback.data[0] == '1':
        if callback.data == '1-–î–∞':
            await callback.answer('+ –±–∞–ª–ª üî•')
            balls+=1
        else:
            await callback.answer('–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–πü´§')
        await callback.bot.send_message(callback.message.chat.id, question2, reply_markup=q2_markup, parse_mode='HTML')
    elif callback.data[0] == '2':
        if callback.data == '2-10':
            await callback.answer('+ –±–∞–ª–ª üî•')
            balls+=1
        else:
            await callback.answer('–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–πü´§')
        await callback.bot.send_message(callback.message.chat.id, question3, reply_markup=q3_markup, parse_mode='HTML')
    elif callback.data[0] == '3':
        if callback.data[2] == 't':
            await callback.answer('+ –±–∞–ª–ª üî•')
            balls+=1
        else:
            await callback.answer('–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–πü´§')
        await callback.bot.send_message(callback.message.chat.id, question4, reply_markup=q4_markup, parse_mode='HTML')
    elif callback.data[0] == '4':
        if callback.data[2] == 't':
            await callback.answer('+ –±–∞–ª–ª üî•')
            balls += 1
        else:
            await callback.answer('–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–πü´§')
        await callback.bot.send_message(callback.message.chat.id, question5, reply_markup=q5_markup, parse_mode='HTML')
    elif callback.data[0] == '5':
        if callback.data[2] == 't':
            await callback.answer('+ –±–∞–ª–ª üî•')
            balls += 1
        else:
            await callback.answer('–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–πü´§')
        await callback.bot.send_message(callback.message.chat.id, f'–û–ì–û, —Ç—ã –Ω–∞–±—Ä–∞–ª —Ü–µ–ª—ã—Ö <b>{balls} –±–∞–ª–ª–æ–≤</b>ü§©\n –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∏ —Ç–æ–≥–¥–∞ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –æ—Ç–ª–∏—á–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–ºüë®‚Äçüè´' ,
                                        parse_mode='HTML',
                                        reply_markup=finish_markup)
        balls = 0
    elif callback.data == '–≥–≥':
        await callback.answer('START')
        await callback.bot.send_message(callback.message.chat.id, question1, reply_markup=q1_markup, parse_mode='HTML')
executor.start_polling(dp)
